







/*
-- !create mySalad : FruitSalad between (aBanana,myNewApple)

association MapTiles between
    Map[1] role map
        qualifier (x:Integer, y:Integer)
    Tile[0..1] role tiles
end
-- !insert (aMap{1,1}, aTile) into MapTiles
-- ? aMap.tiles[1,1]

*/






-- TODO: add to course ->closure  -- introduced with OCL 2.3.
-- ->oclAsType, ->oclIsKindOf
-- ->sortedBy()
-- Set(Integer)[}

-- COMMANDS
-- reopen
-- coverage


-- TODO: check what this means
-- * It is now possible to optionally specify the source end in
--  navigation with `<object>.<rolename>[<rolename>]'. This is
--  necessary when a navigation is ambiguous (regards reflexive ternary
--  associations and association classes).

/*


Existential Invariants
""""""""""""""""""""""

"Existential" invariants are checked only if there is at least one instance
of a given context. They are marked as  "existential"::

    context Person existential inv bossExists:
        self.isBoss = true

When no instance of a person is created or no boss exists this  invariant will
evaluate to false (instead of regular invariants, where the expression will
evaluate to true, if no person is instantiated).::

    context Person existential inv bossExists:
        Person.allInstances()->exist(p | p.isBoss)

Multiple Variables in Invariants
""""""""""""""""""""""""""""""""
Invariants can have multiple variables::

    context p1, p2:Person inv nameUnique:
        p1.name = p2.name implies p1 = p2


Null upcasted
"""""""""""""

The undefined value (null) can be "upcasted" by specifying a type::

    null(Integer)

This is the shorthand notation for::

    let i:Integer = null in i
*/
