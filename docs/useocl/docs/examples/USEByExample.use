model JungleExample
-- ========================== Enumerations =====================================
enum Season {winter, autumn, spring, summer}
-- ========================== Classes ==========================================
class Fruit end                    -- Classes used below
abstract class ForestThing end     -- abstract classes cannot be instanciated
class Animal end

-- Class, Inheritance, Attributes, Operations, Local constraints
class Banana < Fruit, ForestThing
attributes
    length : Integer /* Integer, Real, Boolean, String */
    growthTime : Season
    -- Tuple, Bag, Set, OrderedSet, Sequence
    goodies : OrderedSet(Bag(Sequence(Set(Tuple(x:Integer,y:Real,z:String)))))
    -- Attribute initialisation
    remainingDays : Integer
        init: 0
    -- Derived attribute
    size : Real
        derived: self.length * self.remainingDays
    -- RESTRICTION/std: No invariants directly declared on attributes
    -- RESTRICTION/std: No cardinality supported for attributes (e.g. String[0..1])
operations
    wakeUp(n : Integer):String       -- operation specified
        pre notTooMuch: n > 10 and n < self.length   -- precondition
        post growing: result > 'anaconda'            -- postcondition
    helloJungle() : String           -- operation with soil actions
        begin
            declare x : Banana ;
            WriteLine('hello') ;
            x := new Banana ;
            self.length := self.length + self.remainingDays*20+3 ;
            result := 'jungle' ;
            destroy x ;
        end
        post growing: self.length > self.length@pre  -- @pre(vious) value
    smash() : String                 -- operation/query defined in OCL
        = 'li'+'ons' -- derived/query operation defined as anOCL expression
constraints
    -- invariants
    inv growthSeasons: self.growthTime <> Season::winter
end -- end of class Banana
-- ========================== Associations =====================================
-- Associations, Roles, Cardinality
association Eats between   -- 'association' or 'composition' or 'aggregation'
    Animal[*] role eater   -- could be followed by 'ordered'
    Banana[1] role food    -- cardinality can be [1..8,10,15..*]
    -- ...                 -- more roles here for n-ary associations
end
-- Association classes
associationclass Dislike between
    Animal [0..1] role animal
    Banana[1..*] role bananas
attributes                 -- operations can be declared as well
    reason : String
end
-- Qualified associations
association Prefers between
    Animal [*] role animals qualifier (period:Season)
    Fruit[0..1] role candy
end
-- ========================== External Constraints =============================
constraints
context Banana                                     -- Constraints on Classes
    inv atLeastOne: Banana.allInstances()->size()>1
context self:Banana                                -- Constraints on Attributes
    inv largeEnough: self.length > 3
context Banana::wakeUp(n:Integer):String           -- Constraints on Operations
    -- Constraints on Operations
    pre justOk: self.length < 1000 and n > 12
    post notTiger: result <> 'tiger'


class DateTime
attributes
    nbOfMinutes : Integer
operations
    day():Integer = self.nbOfMinutes div (24*60)
    hour():Integer = (self.nbOfMinutes).mod(24*60) div 60
    minute():Integer = self.nbOfMinutes.mod(60)
    setTime(day:Integer,hour:Integer,minute:Integer)
        begin
          self.nbOfMinutes := (day*24+hour)*60+minute
        end
    toString():String
        = 'Day #'+self.day().toString()
           +' '+self.hour().toString()+':'+self.minute().toString()
    minutesFrom(d:DateTime):Integer
        = self.nbOfMinutes - d.nbOfMinutes
end

class Environment
attributes
    now : DateTime
operations
    assert(message:String,condition:Boolean)
        begin
            if not condition then
                WriteLine('AssertionError: '+message)
            end
        end
end
