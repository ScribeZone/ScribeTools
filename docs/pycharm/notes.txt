PyCharm
    Foo # Class Foo visible in the current scope
    x.y.Bar # Class Bar from x.y module
    Foo | Bar # Foo or Bar
    (Foo, Bar) # Tuple of Foo and Bar
    list[Foo] # List of Foo elements
    dict[Foo, Bar] # Dict from Foo to Bar
    T # Generic type (T-Z are reserved for generics)
    T <= Foo # Generic type with upper bound Foo
    Foo[T] # Foo parameterized with T
    (Foo, Bar) -> Baz # Function of Foo and Bar that returns Baz
    list[dict[str, datetime]] # List of dicts from str to datetime (nested arguments)
    :param "type_name" "param_name": "param_description" # Combining parameter type and documentation in a single line. See Sphinx documentation for details.)